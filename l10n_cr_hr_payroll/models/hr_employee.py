# copyright  2018 Carlos Wong, Akurey SA
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl).

from odoo import models, fields, api, _
from datetime import datetime
import datetime
import logging

_logger = logging.getLogger(__name__)

class hr_employee(models.Model):
    _inherit = 'hr.employee'

    
    marital_exoneration = fields.Boolean(
        help="Indicates if the marital exoneration should be applied in taxes computation",
        string="Apply exoneration?"
    )

    children_exoneration = fields.Boolean(
        help="Indicates if the exoneration because of children should be applied in taxes computation",
        string="Apply exoneration for children?"
    )

    working_from_home = fields.Boolean(
        help="Indicates if the employee is working from home",
        string="WFH?"
    )

    retirement_plan = fields.Float(
        'Retirement Plan', 
        digits=(10,2), 
        help='Monthly amount used for a supplementary pension that can be exonerate from rent tax and CCSS',
        default=0
    )

    vacation_days = fields.Float(
        'Vacation Days', 
        digits=(2,2), 
        help='Vacation days assigned per month worked',
        default=1
    )

    initial_date = fields.Date(
        help="Set the initial date of the employee working for the company to compute vacation days",
        string="Initial Date"
    )

    first_day = fields.Integer(
        compute='_compute_first_day',
        store=True
    )
    
    @api.one
    @api.depends('initial_date')
    def _compute_first_day(self):
        if self.initial_date:
            selectedDate = fields.Date.from_string(self.initial_date)
            self.first_day = selectedDate.day
        else:
            self.first_day = 0
            
    @api.model
    def _cron_update(self):
        _logger.info("=========================================================")
        
        _logger.info("Executing vacation assigment")
        current_day = datetime.datetime.now().day
        employees = self.env['hr.employee'].search([('first_day', '=', 1),('active', '=', True)])
        _logger.info("Assigning vacation day to: ")
        employees_list = "<ul>"
        for employee in employees:
            employees_list = employees_list + "<li>" + employee.name + "</li>"
            result = self.env['hr.holidays'].create({
                'name': datetime.datetime.now().strftime('Asignaci칩n Autom치tica %Y-%m-%d'),
                'state': 'validate',
                'user_id': employee.resource_id.user_id.id,
                'report_note': 'Autogenerated',
                'holiday_status_id': 1,
                'employee_id': employee.id,
                'notes': "" + datetime.datetime.now().strftime('Asignaci칩n Autom치tica del mes de %B del %Y'),
                'number_of_days_temp' : employee.vacation_days,
                'number_of_days' : employee.vacation_days,
                'type': 'add',
                'department_id': employee.department_id.id,
            })
        employees_list = employees_list + "</ul>"
        _logger.info(employees_list)
        _logger.info("=========================================================")


# class hr_employee_contract(models.Model):
#     _inherit = 'hr.contract'

#     wage = fields.Monetary('Wage', digits=(16, 2), currency_field='journal_id.currency_id', required=True, track_visibility="onchange", help="Employee's monthly gross wage.")